// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quiz_application.Infrastructure.Data;

#nullable disable

namespace quiz_application.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250612090818_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("quiz_application.Domain.Entities.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("quiz_application.Domain.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderInQuiz")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuizId")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("quiz_application.Domain.Entities.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PassPercentage")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionOrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TimeLimitSeconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuizId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("quiz_application.Domain.Entities.UserAnswer", b =>
                {
                    b.Property<int>("AttemptId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AttemptId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("quiz_application.Domain.Entities.UserQuizAttempt", b =>
                {
                    b.Property<int>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ClientEndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ClientStartTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuizId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("AttemptId");

                    b.HasIndex("QuizId");

                    b.ToTable("UserQuizAttempts");
                });

            modelBuilder.Entity("quiz_application.Domain.Entities.Option", b =>
                {
                    b.HasOne("quiz_application.Domain.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("quiz_application.Domain.Entities.Question", b =>
                {
                    b.HasOne("quiz_application.Domain.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("quiz_application.Domain.Entities.UserAnswer", b =>
                {
                    b.HasOne("quiz_application.Domain.Entities.UserQuizAttempt", "Attempt")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quiz_application.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quiz_application.Domain.Entities.Option", "SelectedOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId");

                    b.Navigation("Attempt");

                    b.Navigation("Question");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("quiz_application.Domain.Entities.UserQuizAttempt", b =>
                {
                    b.HasOne("quiz_application.Domain.Entities.Quiz", "Quiz")
                        .WithMany("UserQuizAttempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("quiz_application.Domain.Entities.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("quiz_application.Domain.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserQuizAttempts");
                });

            modelBuilder.Entity("quiz_application.Domain.Entities.UserQuizAttempt", b =>
                {
                    b.Navigation("UserAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
