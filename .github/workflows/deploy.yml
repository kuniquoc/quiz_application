name: Deploy Quiz Application to Ubuntu

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/quiz_application:latest
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/quiz_application:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/quiz_application:buildcache,mode=max

      - name: Create .env.docker-compose file
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env.docker-compose
          echo "PORT=5000" >> .env.docker-compose
          echo "HTTPS_PORT=5001" >> .env.docker-compose
          echo "ASPNETCORE_ENVIRONMENT=Production" >> .env.docker-compose
          echo "ASPNETCORE_URLS=http://+:5000;https://+:5001" >> .env.docker-compose
          echo "ConnectionStrings__DefaultConnection=Data Source=/app/data/quiz_application.db" >> .env.docker-compose

      - name: Copy files to Ubuntu server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.UBUNTU_SERVER_IP }}
          username: ${{ secrets.UBUNTU_SERVER_USERNAME }}
          password: ${{ secrets.UBUNTU_SERVER_PASSWORD }}
          source: "docker-compose.yml,.env.docker-compose"
          target: "/home/${{ secrets.UBUNTU_SERVER_USERNAME }}/quiz_application"

      - name: Deploy to Ubuntu server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.UBUNTU_SERVER_IP }}
          username: ${{ secrets.UBUNTU_SERVER_USERNAME }}
          password: ${{ secrets.UBUNTU_SERVER_PASSWORD }}
          script: |
            set -e
            cd ~/quiz_application
            docker compose down || echo "No existing containers"
            docker pull ${{ secrets.DOCKER_USERNAME }}/quiz_application:latest
            docker compose --env-file .env.docker-compose up -d

            # Create data directory with correct permissions if it doesn't exist
            if [ ! -d "data" ]; then
              mkdir -p data
              chmod 777 data
            fi

            echo "Deployment completed successfully!"
